import telebot
import os
import cv2
import requests
import json
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import numpy as np
from imageai.Detection import ObjectDetection
import matplotlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
matplotlib.rcParams['font.sans-serif'] = ['SimHei']
matplotlib.rcParams['axes.unicode_minus'] = False

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
from config import API_TOKEN

bot = telebot.TeleBot(API_TOKEN)

def download_model(model_url, model_path="models/yolov3.pt"):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ YOLOv3
    """
    os.makedirs(os.path.dirname(model_path), exist_ok=True)

    if not os.path.exists(model_path):
        print(f"SafetyAI: –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å...")
        try:
            response = requests.get(model_url, stream=True)
            with open(model_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            print("SafetyAI: –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞!")
        except Exception as e:
            print(f"SafetyAI: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
            return None
    else:
        print("SafetyAI: –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    return model_path

def detect_objects_on_image(input_image_path, min_probability=40):
    """
    –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    """
    print("SafetyAI: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
    model_url = "https://github.com/OlafenwaMoses/ImageAI/releases/download/3.0.0-pretrained/yolov3.pt"
    model_path = download_model(model_url)

    if not model_path:
        return []

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = ObjectDetection()
    detector.setModelTypeAsYOLOv3()
    detector.setModelPath(model_path)
    detector.loadModel()

    print("SafetyAI: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...")

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    output_image_path = "temp_detection.jpg"

    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã
    detections = detector.detectObjectsFromImage(
        input_image=input_image_path,
        output_image_path=output_image_path,
        minimum_percentage_probability=min_probability
    )

    print(f"SafetyAI: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(detections)} –æ–±—ä–µ–∫—Ç–æ–≤")
    return detections, output_image_path

def analyze_objects(detections):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã
    """
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    object_categories = {
        'person': {'russian': '—á–µ–ª–æ–≤–µ–∫', 'danger_level': '–≤—ã—Å–æ–∫–∏–π'},
        'bicycle': {'russian': '–≤–µ–ª–æ—Å–∏–ø–µ–¥', 'danger_level': '—Å—Ä–µ–¥–Ω–∏–π'},
        'car': {'russian': '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', 'danger_level': '—Å—Ä–µ–¥–Ω–∏–π'},
        'motorcycle': {'russian': '–º–æ—Ç–æ—Ü–∏–∫–ª', 'danger_level': '–≤—ã—Å–æ–∫–∏–π'},
        'bus': {'russian': '–∞–≤—Ç–æ–±—É—Å', 'danger_level': '—Å—Ä–µ–¥–Ω–∏–π'},
        'truck': {'russian': '–≥—Ä—É–∑–æ–≤–∏–∫', 'danger_level': '–≤—ã—Å–æ–∫–∏–π'},
        'train': {'russian': '–ø–æ–µ–∑–¥', 'danger_level': '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'},
        'traffic light': {'russian': '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', 'danger_level': '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π'},
        'stop sign': {'russian': '–∑–Ω–∞–∫ —Å—Ç–æ–ø', 'danger_level': '–≤—ã—Å–æ–∫–∏–π'},
        'cat': {'russian': '–∫–æ—à–∫–∞', 'danger_level': '–Ω–∏–∑–∫–∏–π'},
        'dog': {'russian': '—Å–æ–±–∞–∫–∞', 'danger_level': '–Ω–∏–∑–∫–∏–π'},
        'bird': {'russian': '–ø—Ç–∏—Ü–∞', 'danger_level': '–Ω–∏–∑–∫–∏–π'},
        'chair': {'russian': '—Å—Ç—É–ª', 'danger_level': '–Ω–∏–∑–∫–∏–π'},
        'table': {'russian': '—Å—Ç–æ–ª', 'danger_level': '–Ω–∏–∑–∫–∏–π'}
    }

    filtered_objects = []
    danger_count = 0

    for detection in detections:
        object_name = detection['name'].lower()
        if object_name in object_categories:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            detection['russian_name'] = object_categories[object_name]['russian']
            detection['danger_level'] = object_categories[object_name]['danger_level']
            detection['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            if object_categories[object_name]['danger_level'] in ['–≤—ã—Å–æ–∫–∏–π', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π']:
                danger_count += 1

            filtered_objects.append(detection)
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            detection['russian_name'] = object_name
            detection['danger_level'] = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            detection['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            filtered_objects.append(detection)

    return filtered_objects, danger_count

def calculate_distance(box_points, image_width):
    """
    –û—Ü–µ–Ω–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ bounding box
    """
    x1, y1, x2, y2 = box_points
    object_width = x2 - x1
    object_height = y2 - y1

    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–º –æ–Ω –±–ª–∏–∂–µ
    size_ratio = (object_width * object_height) / (image_width * image_width)

    if size_ratio > 0.3:
        return "–æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ (<10–º)"
    elif size_ratio > 0.15:
        return "–±–ª–∏–∑–∫–æ (10-25–º)"
    elif size_ratio > 0.05:
        return "—Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è (25-50–º)"
    else:
        return "–¥–∞–ª–µ–∫–æ (>50–º)"

def draw_detection_results(image_path, detections, output_path="detected_result.jpg"):
    """
    –†–∏—Å—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å bounding boxes –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–∫—Å—Ç–∞
    pil_image = Image.open(image_path).convert('RGB')
    draw = ImageDraw.Draw(pil_image)

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    try:
        font_paths = [
            'C:/Windows/Fonts/arial.ttf',
            'C:/Windows/Fonts/tahoma.ttf',
            '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',
            '/System/Library/Fonts/Arial.ttf'
        ]

        font = None
        for font_path in font_paths:
            if os.path.exists(font_path):
                try:
                    font = ImageFont.truetype(font_path, 20)
                    break
                except:
                    continue

        if font is None:
            font = ImageFont.load_default()
    except:
        font = ImageFont.load_default()

    image_width, image_height = pil_image.size

    for detection in detections:
        box_points = detection["box_points"]
        x1, y1, x2, y2 = box_points

        # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if detection.get('danger_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') == '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π':
            color = (0, 0, 0)  # –ö—Ä–∞—Å–Ω—ã–π
        elif detection.get('danger_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') == '–≤—ã—Å–æ–∫–∏–π':
            color = (0, 0, 0)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        elif detection.get('danger_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') == '—Å—Ä–µ–¥–Ω–∏–π':
            color = (0, 0, 0)  # –ñ–µ–ª—Ç—ã–π
        else:
            color = (0, 0, 0)  # –ó–µ–ª–µ–Ω—ã–π

        # –†–∏—Å—É–µ–º bounding box
        draw.rectangle([x1, y1, x2, y2], outline=color, width=3)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        russian_name = detection.get('russian_name', detection['name'])
        label = f"{russian_name} {detection['percentage_probability']:.1f}%"

        # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        bbox = draw.textbbox((x1, y1 - 35), label, font=font)
        draw.rectangle(bbox, fill=color)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        draw.text((x1 + 5, y1 - 35), label, font=font, fill=(255, 255, 255))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
        distance = calculate_distance(box_points, image_width)
        distance_text = f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}"
        draw.text((x1, y2 + 5), distance_text, font=font, fill=color)

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    timestamp_text = f"–ê–Ω–∞–ª–∏–∑: {timestamp}"
    draw.text((10, 10), timestamp_text, font=font, fill=(255, 255, 255))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    pil_image.save(output_path)
    return output_path

def generate_short_caption(detections, danger_count):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
    """
    caption = f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(detections)} –æ–±—ä–µ–∫—Ç–æ–≤"
    if danger_count > 0:
        caption += f" ‚ö†Ô∏è –û–ø–∞—Å–Ω—ã—Ö: {danger_count}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Å–∞–º—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if detections:
        top_objects = sorted(detections, key=lambda x: x['percentage_probability'], reverse=True)[:3]
        objects_list = ", ".join([f"{obj.get('russian_name', obj['name'])}" for obj in top_objects])
        caption += f"\nüìã –¢–æ–ø-3: {objects_list}"
    
    return caption

def generate_detailed_report(detections, danger_count):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    if not detections:
        return "‚ùå –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤."
    
    report = f"üìä **–î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢**\n\n"
    report += f"‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: **{len(detections)}**\n"
    report += f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö: **{danger_count}**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    object_counts = {}
    for obj in detections:
        obj_name = obj.get('russian_name', obj['name'])
        if obj_name not in object_counts:
            object_counts[obj_name] = {
                'count': 0,
                'max_confidence': 0,
                'danger_level': obj.get('danger_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            }
        object_counts[obj_name]['count'] += 1
        if obj['percentage_probability'] > object_counts[obj_name]['max_confidence']:
            object_counts[obj_name]['max_confidence'] = obj['percentage_probability']
    
    report += "**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:**\n"
    for obj_name, info in object_counts.items():
        danger_icon = "‚ö†Ô∏è" if info['danger_level'] in ['–≤—ã—Å–æ–∫–∏–π', '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'] else "‚úÖ"
        report += f"{danger_icon} **{obj_name}**: {info['count']} —à—Ç. (–º–∞–∫—Å. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {info['max_confidence']:.1f}%)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è—Ö
    if detections:
        most_confident = max(detections, key=lambda x: x['percentage_probability'])
        report += f"\nüéØ **–°–∞–º—ã–π —É–≤–µ—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç**: {most_confident.get('russian_name', most_confident['name'])} "
        report += f"({most_confident['percentage_probability']:.1f}%)"
    
    report += f"\n\n‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%H:%M:%S')}"
    
    # –û–±—Ä–µ–∑–∞–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram)
    if len(report) > 4000:
        report = report[:4000] + "\n\n... (–æ—Ç—á–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
    
    return report

def split_message(text, max_length=4096):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    """
    if len(text) <= max_length:
        return [text]
    
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        else:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
            split_pos = text.rfind('\n', 0, max_length)
            if split_pos == -1:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º
                split_pos = text.rfind('.', 0, max_length)
            if split_pos == -1:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–µ–∫, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
                split_pos = text.rfind(' ', 0, max_length)
            if split_pos == -1:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º
                split_pos = max_length
            
            parts.append(text[:split_pos])
            text = text[split_pos:].lstrip()
    
    return parts

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help
    """
    welcome_text = """
üöÄ **SafetyAI Bot - –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö**

–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∏—Ö —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
2. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –∏ –Ω–∞–π–¥—É –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
4. –ò –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üì∏
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['status'])
def send_status(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
    """
    status_text = "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n–ú–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."
    bot.reply_to(message, status_text)

@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        input_image_path = f"temp_input_{message.chat.id}.jpg"
        with open(input_image_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
        detections, temp_output_path = detect_objects_on_image(input_image_path)
        
        if not detections:
            bot.edit_message_text("‚ùå –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤.", 
                                message.chat.id, processing_msg.message_id)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(input_image_path)
            if os.path.exists(temp_output_path):
                os.remove(temp_output_path)
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã
        filtered_objects, danger_count = analyze_objects(detections)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        output_image_path = draw_detection_results(input_image_path, filtered_objects, 
                                                 f"result_{message.chat.id}.jpg")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ñ–æ—Ç–æ
        photo_caption = generate_short_caption(filtered_objects, danger_count)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        detailed_report = generate_detailed_report(filtered_objects, danger_count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é
        with open(output_image_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=photo_caption)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        report_parts = split_message(detailed_report)
        for part in report_parts:
            bot.send_message(message.chat.id, part, parse_mode='Markdown')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        bot.delete_message(message.chat.id, processing_msg.message_id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(input_image_path)
        os.remove(output_image_path)
        if os.path.exists(temp_output_path):
            os.remove(temp_output_path)
            
    except Exception as e:
        error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"
        try:
            bot.edit_message_text(error_msg, message.chat.id, processing_msg.message_id)
        except:
            bot.reply_to(message, error_msg)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'input_image_path' in locals() and os.path.exists(input_image_path):
            os.remove(input_image_path)
        if 'output_image_path' in locals() and os.path.exists(output_image_path):
            os.remove(output_image_path)
        if 'temp_output_path' in locals() and os.path.exists(temp_output_path):
            os.remove(temp_output_path)

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    if message.text:
        bot.reply_to(message, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤!")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    print("üöÄ SafetyAI Bot –∑–∞–ø—É—â–µ–Ω!")
    print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        bot.infinity_polling()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("models", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    main()